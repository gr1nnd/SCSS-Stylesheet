$resetBase_baseBackground: #fff !default;
$resetBase_baseColor: #000 !default;
$resetBase_baseFontFamily: sans-serif !default;


// -- reset --
* {
	box-sizing: border-box;
}

a,abbr,body,button,fieldset,form,h1,h2,h3,h4,h5,h6,iframe,img,label,legend,li,ol,p,td,th,ul {
	border: 0;
	font-size: 100%;
	font-weight: normal;
	list-style: none;
	margin: 0;
	outline: 0;
	padding: 0;
	text-decoration: none;
	vertical-align: baseline;
}

a,abbr {
	font-weight: inherit;
}

input,select,textarea {
	font-size: 100%;
	margin: 0;
}

// -- base --
body,button,input,select,td,textarea,th {
	color: $resetBase_baseColor;
	font-family: $resetBase_baseFontFamily;
}

body {
	background: $resetBase_baseBackground;
	font-size: 62.5%;
	line-height: 1;
}

// -- base - clear fix --
%clearFix:before,
%clearFix:after {
	content: '\0020'; // space character
	display: block;
	height: 0;
	overflow: hidden;
}

%clearFix:after {
	clear: both;
}

// -- base - hide --
%hide {
	left: -999em;
	overflow: hidden;
	position: absolute;
	top: -999em;
	width: 1em;
}

// -- base - text overflow ellipsis --
%textOverflowEllipsis {
	overflow-x: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// -- base - responsive image --
%responsiveImage {
	display: block;
	height: auto;
	max-width: 100%;
}

// -- base - touch device tap highlight remove --
%tapHighlightRemove {
	-webkit-tap-highlight-color: rgba(0,0,0,0);
}

@mixin respondWidth($query) {
	@media screen and #{$query} { @content; }
}

@mixin respondWidthFrom($key) {
	@if (map-has-key($respondWidthMap,$key)) {
		@media screen and
			(min-width: map-get($respondWidthMap,$key) + 1) { @content; }
	} @else {
		@error 'Invalid $respondWidthMap \'from\' key: #{$key}';
	}
}

@mixin respondWidthUpTo($key) {
	@if (map-has-key($respondWidthMap,$key)) {
		@media screen and
			(max-width: map-get($respondWidthMap,$key)) { @content; }
	} @else {
		@error 'Invalid $respondWidthMap \'up to\' key: #{$key}';
	}
}

@mixin respondWidthFromUpTo($keyFrom,$keyUpTo) {
	@if (map-has-key($respondWidthMap,$keyFrom)) {
		@if (map-has-key($respondWidthMap,$keyUpTo)) {
			$widthFrom: map-get($respondWidthMap,$keyFrom);
			$widthUpTo: map-get($respondWidthMap,$keyUpTo);

			@if ($widthFrom < $widthUpTo) {
				@media screen and
					(min-width: $widthFrom + 1) and
					(max-width: $widthUpTo) { @content; }
			} @else {
				@error '$respondWidthMap key \'from\' (#{$keyFrom}) must be lower than key \'up to\' (#{$keyUpTo})';
			}
		} @else {
			@error 'Invalid $respondWidthMap \'up to\' key: #{$keyUpTo}';
		}
	} @else {
		@error 'Invalid $respondWidthMap \'from\' key: #{$keyFrom}';
	}
}

@function respondWidthGet($key,$shift: 0) {
	@if (map-has-key($respondWidthMap,$key)) {
		@return (map-get($respondWidthMap,$key) + $shift);
	}

	@error 'Invalid $respondWidthMap key: #{$key}';
}

@mixin retinaImage($src,$width: 100%) {
    @media only screen and (-webkit-min-device-pixel-ratio: 2),
        only screen and (min-resolution: 192dpi) {
            background-image: url(#{$src});
            backround-size: $width;
        }
}    

@mixin retinaOnly() {
    @media only screen and (-webkit-min-device-pixel-ratio: 2)
        only screen and (min-resolution: 192dpi) { @content; }
}

$vendorLinerGradientLegacyAngleList: (
	to bottom		: top,
	to bottom left	: top right,
	to bottom right	: top left,
	to left			: right,
	to right		: left,
	to top			: bottom,
	to top left		: bottom right,
	to top right	: bottom left
);


@mixin backface-visibility($value) {
    -webkit-backface-visibility: $value;
    backface-visibility: $value;
}

@mixin linear-gradient($angle,$stops...) {
	@if (map-has-key($vendorLinerGradientLegacyAngleList,$angle)) {
		$angleLegacy: map-get($vendorLinerGradientLegacyAngleList,$angle);
		background: -webkit-linear-gradient($angleLegacy,$stops);
		background: linear-gradient($angle,$stops);
	} @else {
		@error 'Invalid $angle: #{$angle}';
	}
}

@mixin transorm($value)
    -ms-transform $value; //for IE9
    -webkit-transform: $value;
	transform: $value;
}
// --animation--
@mixin animation($value) {
    -webkit-animation: $value;
    animation: $value;
}

@mixin animation-delay($value) {
    -webkit-animation-delay: $value;
    animation-delay: $value;
}

@mixin animation-direction($value) {
    -webkit-animation-direction: $value;
    animation-direction: $value;
}

@mixin animation-duration($value) {
    -webkit-animation-duration: $value;
    animation-duration: $value;
}

@mixin animation-fill-mode($value) {
    -webkit-animation-fill-mode: $value;
    animation-fill-mode: $value;
}

@mixin animation-iteration-count($value) {
    -webkit-animation-iteration-count: $value;
    animation-iteration-count: $value;
}

@mixin animation-name($value) {
    -webkit-animation-name: $value;
    animation-name: $value
}

@mixin animation-play-state($value) {
    -webkit-animation-play-state: $value;
    animation-play-state: $value
}

@mixin animation-timing-function($value) {
    -webkit-animation-timing-function: $value;
    animation-timing-function: $value;
}

// -- animation - keyframes --
@mixin keyframes($name) {
    @-webkit-keyframes #{$name} { @content; }
    @keyframes #{$name} { @content; }
}

// -- transition --
@mixin transition($value...) {
    -webkit-transition: $value;
    transition: $value;
}

@mixin transition-delay($value) {
    -webkit-transition-delay: $value;
    transition-delay: $value;
}

@mixin transition-duration($value) {
    -webkit-transition-duration: $value;
    transition-delay: $value;
}

@mixin transition-property($value...) {
    -webkit-transition-duration: $value;
    transition-delay: $value;
}

@mixin transition-timing-function($value) {
    -webkit-transition-timing-function: $value;
    transition-timing-function: $value;
}

@function color($key) {
    @if (map-has-key($colorMap,$key)) {
        @return  map-get($colorMap,$key);
    }

    @error 'Invalid $colorMap key: #{$key}';
}

@function fontSize($key: null) {
    @if ($key == null) {
        // default to first map key
        $key: nth(map-keys($fontSizeMap),1);
    }    

    @if(map-has-key($fontSizeMap,key)) {
       @return map-get($fontSizeMap,$key);
    }   

    @error 'Invalid $fontSizeMap key: #{$key}'
}   

@function sp($key: null,$multiplier: 1) {
    @if ($key == null) {
        // default to first map key
        $key: nth(map-keys($spacingMap),1);
    }

    @if (map-has-key($spacingMap,$key)) {
        @return(map-get($spacingMap,$key) * $multiplier);
    }

    @error 'Invalid $spacingMap key: #{key}'
}

@function zIndex($key: null,$shift: 0) {
	@if ($key == null) {
		// default to first map key
		$key: nth(map-keys($zIndexMap),1);
	}

	@if (map-has-key($zIndexMap,$key)) {
		@return (map-get($zIndexMap,$key) + $shift);
	}

	@error 'Invalid $zIndexMap key: #{$key}';
}

@mixin fontFace($family,$src,$style: normal,$weight: normal) {
    @font-face {
        font-family: $family;
        scr: url('#{$scr}.eot'); // IE9 compat
        src: url('#{$src}.eot?#iefix') format('embedded-opentype'), // IE8 and below
			url('#{$src}.woff') format('woff'), // standards
			url('#{$src}.ttf') format('truetype'), // Safari, Android, iOS
			url('#{$src}.svg##{$family}') format('svg'); // legacy iOS

        font-style: $style;
        font-weight: $weight
    }
}

@import '../../helpers/_functions.scss';
@import '../../helpers/_mixins.scss';
@import '../../helpers/_selectors.scss';
@import '../../helpers/_size.scss';
@import '../core/theme.scss';

/* BUTTONS */

/* Button styling */
/* Un-themed */

#{$button-selectors} {
    line-height: 2rem;
    overflow: hidden;
    padding: 0.5rem 1rem;
    border: 1px solid transparent;
    border-radius: 0.25rem;
    cursor: pointer;
    text-align: center;
    transition: all var(--animation-duration);
    background-color: var(--btn-color);
    border-color: var(--btn-border-color);
    color: var(--btn-fg);
    font-size: 0.75rem;
    letter-spacing: 0.03rem;
    text-transform: uppercase;
    font-family: Montserrat;
    min-width: 2rem;
    user-select: none;
    margin-bottom: 1rem;
    outline: none;
    --btn-color: #{map-get($grays, '000')};
    --btn-fg: #{map-get($grays, '700')};
    --btn-border-color: #{map-get($grays, '200')};

    /* Base States */
    &:hover {
        transition: all var(--animation-duration);
        --btn-color: #{map-get($grays, '100')};
        color: var(--btn-fg);
    }

    &:active {
        transition: var(--animation-duration) ease;
    }

    &:focus {
        outline: none;
    }

    &:disabled {
        cursor: not-allowed;
        opacity: 0.5;

        &:active {
            pointer-events: none;
        }
    }

    &.outline {
        --btn-color: transparent;

        &:hover {
            --btn-color: #{map-get($grays, '200')};
        }
    }

    /* Loading Button*/
    /* Make the loading circle, if present, white when button is active */
    &.loading:active::after {
        border-radius: 50%;
        border-right-color: transparent;
        border-top-color: transparent;
        transition: var(--animation-duration) ease;
    }

    /* Animated Button */
    &.btn-animated {
        transition: calc(var(--animation-duration) / 2) ease;

        &:active {
            -webkit-transform: scale(0.95);
            transform: scale(0.95);
            transition: calc(var(--animation-duration) / 2) ease;
        }
    }

    /* Close Button */
    &.btn-close {
        background-color: rgba(10, 10, 10, 0.2);
        border: none;
        border-radius: 290486px;
        cursor: pointer;
        display: inline-block;
        flex-grow: 0;
        flex-shrink: 0;
        font-size: 0;
        height: 20px;
        outline: 0;
        position: relative;
        vertical-align: top;
        width: 20px;
        padding: 0;
        min-width: 20px;

        &:hover {
            background-color: rgba(10, 10, 10, 0.3);
        }

        /* Render the x in the close button */
        @mixin btn-close-x($height, $width) {
            background-color: var(--cirrus-bg);
            content: '';
            display: block;
            left: 50%;
            position: absolute;
            top: 50%;
            -webkit-transform: translateX(-50%) translateY(-50%) rotate(45deg);
            transform: translateX(-50%) translateY(-50%) rotate(45deg);
            -webkit-transform-origin: center center;
            transform-origin: center center;
            height: $height;
            width: $width;
        }

        &::before {
            @include btn-close-x(2px, 50%);
        }

        &::after {
            @include btn-close-x(50%, 2px);
        }
    }

    /* BUTTON STYLES */
    /* Regular */
    &.btn-transparent {
        --btn-color: transparent;
        --btn-fg: var(--cirrus-dark);
        --btn-border-color: transparent;

        &:focus {
            box-shadow: 0 0 0 0.2rem rgba(246, 249, 252, 0.5);
        }
        &:hover {
            --btn-color: rgba(0, 0, 0, 0.1);
        }
        &.outline {
            --btn-fg: var(--cirrus-dark);
        }
    }

    &.btn-light {
        --btn-color: var(--cirrus-light);
        --btn-fg: var(--cirrus-dark);
        --btn-border-color: var(--cirrus-light);

        &:hover {
            --btn-color: var(--cirrus-light-hover);
        }
        &:focus {
            box-shadow: 0 0 0 0.2rem transparentize($cirrus-light, 0.5);
        }
    }

    &.btn-dark {
        --btn-color: var(--cirrus-dark);
        --btn-fg: var(--cirrus-light);
        --btn-border-color: var(--cirrus-dark);

        &:focus {
            box-shadow: 0 0 0 0.2rem transparentize($cirrus-dark, 0.5);
        }
        &:hover {
            --btn-color: var(--cirrus-dark-hover);
        }
        &.outline:hover {
            --btn-color: var(--cirrus-dark);
        }
    }

    &.btn-black {
        --btn-color: #000;
        --btn-fg: var(--cirrus-light);
        --btn-border-color: #000;

        &:focus {
            box-shadow: 0 0 0 0.2rem transparentize($cirrus-dark, 0.5);
        }
        &:hover {
            --btn-color: #000;
        }
    }

    &.btn-primary {
        --btn-color: var(--cirrus-primary);
        --btn-fg: var(--cirrus-light);
        --btn-border-color: var(--cirrus-accent-border);

        &:focus {
            box-shadow: 0 0 0 0.2rem transparentize($cirrus-primary, 0.5);
        }
        &:hover {
            --btn-color: var(--cirrus-accent-hover);
        }
        &.outline:hover {
            --btn-color: var(--cirrus-primary);
        }
    }

    &.btn-info {
        --btn-color: var(--cirrus-info);
        --btn-fg: var(--cirrus-light);
        --btn-border-color: var(--cirrus-info);

        &:focus {
            box-shadow: 0 0 0 0.2rem transparentize($cirrus-info, 0.5);
        }
        &:hover {
            --btn-color: var(--cirrus-info-hover);
        }
        &.outline:hover {
            --btn-color: var(--cirrus-info);
        }
    }

    &.btn-link {
        --btn-color: var(--cirrus-link);
        --btn-fg: var(--cirrus-light);
        --btn-border-color: var(--cirrus-link);

        &:focus {
            box-shadow: 0 0 0 0.2rem transparentize($cirrus-link, 0.5);
        }
        &:hover {
            --btn-color: var(--cirrus-link-dark);
        }
        &.outline {
            --btn-fg: var(--cirrus-link);
            border: 1px solid transparent;
        }
        &.outline:hover {
            --btn-color: var(--cirrus-link-hover);
            border: 1px solid transparent;
            text-decoration: underline;
        }
    }

    &.btn-success {
        --btn-color: var(--cirrus-success);
        --btn-fg: var(--cirrus-light);
        --btn-border-color: var(--cirrus-success);

        &:focus {
            box-shadow: 0 0 0 0.2rem transparentize($cirrus-success, 0.5);
        }
        &:hover {
            --btn-color: var(--cirrus-success-hover);
        }
        &.outline:hover {
            --btn-color: var(--cirrus-success);
        }
    }

    &.btn-warning {
        --btn-color: var(--cirrus-warning);
        --btn-fg: var(--cirrus-dark);
        --btn-border-color: var(--cirrus-warning);

        &:focus {
            box-shadow: 0 0 0 0.2rem transparentize($cirrus-warning, 0.5);
        }
        &:hover {
            --btn-color: var(--cirrus-warning-hover);
        }
        &.outline:hover {
            --btn-color: var(--cirrus-warning);
        }
    }

    &.btn-danger {
        --btn-color: var(--cirrus-danger);
        --btn-fg: var(--cirrus-light);
        --btn-border-color: var(--cirrus-danger);

        &:focus {
            box-shadow: 0 0 0 0.2rem transparentize($cirrus-danger, 0.5);
        }
        &:hover {
            --btn-color: var(--cirrus-danger-hover);
        }
        &.outline:hover {
            --btn-color: var(--cirrus-danger);
        }
    }

    /* Extra small button */
    &.btn-xsmall {
        padding: 0 0.5rem;
        font-size: 50%;
    }

    /* Small button */
    &.btn-small {
        padding: 0.25rem 1rem;
        font-size: 70%;
    }

    /* Big button */
    &.btn-large {
        padding: 0.75rem 2rem;
        font-size: 90%;
    }

    &.btn-xlarge {
        padding: 1rem 2.5rem;
        font-size: 110%;
    }

    /* STATES */
    &.btn-success {
        @include input-success();
    }

    &.btn-error {
        @include input-error();
    }

    /* GLYPHS */
    .fa-wrapper {
        // /* Override default behavior of aligning font awesome icons to the top */ FontAwesome no longer does this, no need for override
        // vertical-align: baseline;

        &.pad-right {
            margin-right: 0.4rem;
        }

        &.pad-left {
            margin-left: 0.4rem;
        }
    }

    /* Alternatives to pad-left and pad-right */
    span:first-child {
        margin-right: 0.2rem;
    }

    span:last-child {
        margin-left: 0.2rem;
    }
}

[class^='btn-']:not(.btn-container):not(.btn-close),
[class*=' btn-']:not(.btn-container):not(.btn-close) {
    background-color: var(--btn-color);
    border: 1px solid var(--btn-border-color);
    color: var(--btn-fg);
    transition: all var(--animation-duration);

    &:hover {
        background-color: var(--btn-color);
        border-color: var(--btn-border-color);
        transition: all var(--animation-duration);
    }

    /* Outline Variants */
    &.outline {
        background-color: transparent;
        color: var(--btn-color);

        &:hover {
            background-color: var(--btn-color);
            color: var(--btn-fg);
            transition: all var(--animation-duration);
        }

        &.btn-transparent {
            color: #{map-get($grays, '700')} !important;
        }
    }
}

/* Make the loader white so it is visible */
.loading.btn-accent:after {
    border: 2px solid #fff;
    border-right-color: transparent;
    border-top-color: transparent;
}

/* BUTTON GROUPS */
/* Will group buttons with components in a single component */

.btn-group {
    display: -webkit-inline-box;
    display: inline-flex;
    display: -ms-inline-flexbox;
    display: -webkit-inline-flex;

    #{$button-selectors} {
        -ms-flex: 1 0 auto;
        -webkit-box-flex: 1;
        flex: 1 0 auto;
        margin: 0;

        &:first-child:not(:last-child) {
            /* Style the first child in group > 1 buttons */
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }

        &:last-child:not(:first-child) {
            /* Style the last child in group > 1 buttons */
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
            margin-left: -1px;
        }

        &:not(:first-child):not(:last-child) {
            /* Style button in middle of group */
            border-radius: 0; /* Remove roundness from center buttons */
            margin-left: -1px;
        }

        @include elevate-on-focus();
    }

    &.btn-group-fill {
        /* Makes the button group fill the width and proportion the buttons to fill the space */
        display: -webkit-box;
        display: flex;
        display: -ms-flexbox;

        #{$button-selectors} {
            -ms-flex: 1 0;
            -webkit-box-flex: 1;
            flex: 1 0; /* Make the buttons fill the available width and proportion themselves */
        }

        &:focus {
            z-index: 1;
        }
    }
}

@include screen-below('sm') {
    .btn-group {
        display: flex;
        flex-direction: column;

        #{$button-selectors} {
            margin-bottom: -1px;

            &:first-child:not(:last-child) {
                border-radius: 0.25rem 0.25rem 0 0;
            }

            &:not(:first-child):not(:last-child) {
                margin-left: 0;
            }

            &:last-child:not(:first-child) {
                border-radius: 0 0 0.25rem 0.25rem;
                margin-left: 0;
            }
        }
    }
}
